diff --git a/node_modules/react-strict-dom/dist/dom/index.d.ts b/node_modules/react-strict-dom/dist/dom/index.d.ts
index 1e838d7..e64d493 100644
--- a/node_modules/react-strict-dom/dist/dom/index.d.ts
+++ b/node_modules/react-strict-dom/dist/dom/index.d.ts
@@ -9,8 +9,5 @@
 
 import * as html from './html';
 import * as css from '@stylexjs/stylex';
-import { type ThemeProvider as $$IMPORT_TYPEOF_1$$ } from './modules/ThemeContext';
-type TThemeProvider = typeof $$IMPORT_TYPEOF_1$$;
 export * from '../types/StrictTypes';
-declare const contexts: { ThemeProvider: TThemeProvider };
-export { contexts, css, html };
+export { css, html };
diff --git a/node_modules/react-strict-dom/dist/dom/index.js b/node_modules/react-strict-dom/dist/dom/index.js
index 2736303..90a4eac 100644
--- a/node_modules/react-strict-dom/dist/dom/index.js
+++ b/node_modules/react-strict-dom/dist/dom/index.js
@@ -328,25 +328,5 @@ var html = /*#__PURE__*/Object.freeze({
   ul: ul
 });
 
-const defaultContext = {
-  customProperties: {}
-};
-const ThemeContext = React.createContext(defaultContext);
-function ThemeProvider(props) {
-  const {
-    children,
-    customProperties
-  } = props;
-  return customProperties ? React.createElement(ThemeContext.Provider, {
-    children: children,
-    value: {
-      customProperties
-    }
-  }) : children;
-}
-
-const contexts = {
-  ThemeProvider: ThemeProvider
-};
 
-export { contexts, html };
+export { html };
diff --git a/node_modules/react-strict-dom/dist/dom/index.js.flow b/node_modules/react-strict-dom/dist/dom/index.js.flow
index 4c9904b..a8a63d2 100644
--- a/node_modules/react-strict-dom/dist/dom/index.js.flow
+++ b/node_modules/react-strict-dom/dist/dom/index.js.flow
@@ -9,10 +9,7 @@
 
 import * as html from './html';
 import * as css from '@stylexjs/stylex';
-import { typeof ThemeProvider as TThemeProvider } from './modules/ThemeContext';
 
 export * from '../types/StrictTypes';
 
-declare const contexts: { ThemeProvider: TThemeProvider };
-
-export { contexts, css, html };
+export { css, html };
diff --git a/node_modules/react-strict-dom/dist/dom/modules/ThemeContext.d.ts b/node_modules/react-strict-dom/dist/dom/modules/ThemeContext.d.ts
index 7f5f819..e410ea5 100644
--- a/node_modules/react-strict-dom/dist/dom/modules/ThemeContext.d.ts
+++ b/node_modules/react-strict-dom/dist/dom/modules/ThemeContext.d.ts
@@ -17,4 +17,3 @@ type ProviderProps = Omit<ProviderValue, keyof ({ children: JSX.Element })> & {
   children: JSX.Element;
 };
 export declare const ThemeContext: React.Context<ProviderValue>;
-export declare function ThemeProvider(props: ProviderProps): JSX.Element;
diff --git a/node_modules/react-strict-dom/dist/dom/modules/ThemeContext.js.flow b/node_modules/react-strict-dom/dist/dom/modules/ThemeContext.js.flow
deleted file mode 100644
index 23efd96..0000000
--- a/node_modules/react-strict-dom/dist/dom/modules/ThemeContext.js.flow
+++ /dev/null
@@ -1,21 +0,0 @@
-/**
- * Copyright (c) Meta Platforms, Inc. and affiliates.
- *
- * This source code is licensed under the MIT license found in the
- * LICENSE file in the root directory of this source tree.
- *
- * @flow strict
- */
-
-type ProviderValue = {
-  customProperties: { +[string]: ?string | number }
-};
-
-type ProviderProps = {
-  ...ProviderValue,
-  children: React$MixedElement
-};
-
-declare export const ThemeContext: React$Context<ProviderValue>;
-
-declare export function ThemeProvider(props: ProviderProps): React$MixedElement;
diff --git a/node_modules/react-strict-dom/dist/native/index.d.ts b/node_modules/react-strict-dom/dist/native/index.d.ts
index 045e54d..8d6383d 100644
--- a/node_modules/react-strict-dom/dist/native/index.d.ts
+++ b/node_modules/react-strict-dom/dist/native/index.d.ts
@@ -10,9 +10,6 @@
 import type * as $$IMPORT_TYPEOF_1$$ from '@stylexjs/stylex';
 type TStyleX = typeof $$IMPORT_TYPEOF_1$$;
 import * as html from './html';
-import { type ThemeProvider as $$IMPORT_TYPEOF_2$$ } from './modules/ThemeContext';
-type TThemeProvider = typeof $$IMPORT_TYPEOF_2$$;
 export * from '../types/StrictTypes';
-declare const contexts: { ThemeProvider: TThemeProvider };
 declare const css: TStyleX;
-export { contexts, css, html };
+export { css, html };
diff --git a/node_modules/react-strict-dom/dist/native/index.js b/node_modules/react-strict-dom/dist/native/index.js
index f77367e..125593c 100644
--- a/node_modules/react-strict-dom/dist/native/index.js
+++ b/node_modules/react-strict-dom/dist/native/index.js
@@ -1396,16 +1396,6 @@ var cssRaw = /*#__PURE__*/Object.freeze({
 
 const defaultContext = __customProperties;
 const ThemeContext = React.createContext(defaultContext);
-function ThemeProvider(props) {
-  const {
-    children,
-    customProperties
-  } = props;
-  return customProperties ? React.createElement(ThemeContext.Provider, {
-    children: children,
-    value: customProperties
-  }) : children;
-}
 
 function flattenStyle(style) {
   if (style === null || typeof style !== 'object') {
@@ -2754,9 +2744,6 @@ var html = /*#__PURE__*/Object.freeze({
   ul: ul
 });
 
-const contexts = {
-  ThemeProvider: ThemeProvider
-};
 const css = cssRaw;
 
-export { contexts, css, html };
+export { css, html };
diff --git a/node_modules/react-strict-dom/dist/native/index.js.flow b/node_modules/react-strict-dom/dist/native/index.js.flow
index 07aee80..9693658 100644
--- a/node_modules/react-strict-dom/dist/native/index.js.flow
+++ b/node_modules/react-strict-dom/dist/native/index.js.flow
@@ -10,13 +10,10 @@
 import typeof * as TStyleX from '@stylexjs/stylex';
 
 import * as html from './html';
-import { typeof ThemeProvider as TThemeProvider } from './modules/ThemeContext';
 
 export * from '../types/StrictTypes';
 
-declare const contexts: { ThemeProvider: TThemeProvider };
-
 // Export using StyleX types as the shim has divergent types internally.
 declare const css: TStyleX;
 
-export { contexts, css, html };
+export { css, html };
diff --git a/node_modules/react-strict-dom/dist/native/modules/ThemeContext.d.ts b/node_modules/react-strict-dom/dist/native/modules/ThemeContext.d.ts
index 6e6f673..4bbf8b3 100644
--- a/node_modules/react-strict-dom/dist/native/modules/ThemeContext.d.ts
+++ b/node_modules/react-strict-dom/dist/native/modules/ThemeContext.d.ts
@@ -15,4 +15,3 @@ type ProviderProps = Readonly<{
 }>;
 type TThemeContext = React.Context<ProviderValue>;
 export declare const ThemeContext: TThemeContext;
-export declare function ThemeProvider(props: ProviderProps): JSX.Element;
diff --git a/node_modules/react-strict-dom/dist/native/modules/ThemeContext.js.flow b/node_modules/react-strict-dom/dist/native/modules/ThemeContext.js.flow
index 80045d0..5f75771 100644
--- a/node_modules/react-strict-dom/dist/native/modules/ThemeContext.js.flow
+++ b/node_modules/react-strict-dom/dist/native/modules/ThemeContext.js.flow
@@ -17,5 +17,3 @@ type ProviderProps = $ReadOnly<{
 type TThemeContext = React$Context<ProviderValue>;
 
 declare export const ThemeContext: TThemeContext;
-
-declare export function ThemeProvider(props: ProviderProps): React$MixedElement;
diff --git a/node_modules/react-strict-dom/src/dom/index.js b/node_modules/react-strict-dom/src/dom/index.js
index 4a8d36b..a8a63d2 100644
--- a/node_modules/react-strict-dom/src/dom/index.js
+++ b/node_modules/react-strict-dom/src/dom/index.js
@@ -9,11 +9,7 @@
 
 import * as html from './html';
 import * as css from '@stylexjs/stylex';
-import { ThemeProvider } from './modules/ThemeContext';
-import { typeof ThemeProvider as TThemeProvider } from './modules/ThemeContext';
 
 export * from '../types/StrictTypes';
 
-const contexts = { ThemeProvider: ThemeProvider as TThemeProvider };
-
-export { contexts, css, html };
+export { css, html };
diff --git a/node_modules/react-strict-dom/src/dom/modules/ThemeContext.js b/node_modules/react-strict-dom/src/dom/modules/ThemeContext.js
deleted file mode 100644
index a482199..0000000
--- a/node_modules/react-strict-dom/src/dom/modules/ThemeContext.js
+++ /dev/null
@@ -1,41 +0,0 @@
-/**
- * Copyright (c) Meta Platforms, Inc. and affiliates.
- *
- * This source code is licensed under the MIT license found in the
- * LICENSE file in the root directory of this source tree.
- *
- * @flow strict
- */
-
-import * as React from 'react';
-
-type ProviderValue = {
-  customProperties: { +[string]: ?string | number }
-};
-
-type ProviderProps = {
-  ...ProviderValue,
-  children: React$MixedElement
-};
-
-const defaultContext = {
-  customProperties: {}
-};
-
-export const ThemeContext: React$Context<ProviderValue> =
-  React.createContext(defaultContext);
-
-export function ThemeProvider(props: ProviderProps): React$MixedElement {
-  const { children, customProperties } = props;
-
-  return customProperties ? (
-    <ThemeContext.Provider
-      children={children}
-      value={{
-        customProperties
-      }}
-    />
-  ) : (
-    children
-  );
-}
diff --git a/node_modules/react-strict-dom/src/native/index.js b/node_modules/react-strict-dom/src/native/index.js
index 24781d2..e4f1a00 100644
--- a/node_modules/react-strict-dom/src/native/index.js
+++ b/node_modules/react-strict-dom/src/native/index.js
@@ -11,14 +11,10 @@ import typeof * as TStyleX from '@stylexjs/stylex';
 
 import * as html from './html';
 import * as cssRaw from './stylex';
-import { ThemeProvider } from './modules/ThemeContext';
-import { typeof ThemeProvider as TThemeProvider } from './modules/ThemeContext';
 
 export * from '../types/StrictTypes';
 
-const contexts = { ThemeProvider: ThemeProvider as TThemeProvider };
-
 // Export using StyleX types as the shim has divergent types internally.
 const css: TStyleX = cssRaw as $FlowFixMe;
 
-export { contexts, css, html };
+export { css, html };
diff --git a/node_modules/react-strict-dom/src/native/modules/ThemeContext.js b/node_modules/react-strict-dom/src/native/modules/ThemeContext.js
index 12d7bab..0533709 100644
--- a/node_modules/react-strict-dom/src/native/modules/ThemeContext.js
+++ b/node_modules/react-strict-dom/src/native/modules/ThemeContext.js
@@ -22,13 +22,3 @@ type TThemeContext = React$Context<ProviderValue>;
 const defaultContext = __customProperties;
 
 export const ThemeContext: TThemeContext = React.createContext(defaultContext);
-
-export function ThemeProvider(props: ProviderProps): React$MixedElement {
-  const { children, customProperties } = props;
-
-  return customProperties ? (
-    <ThemeContext.Provider children={children} value={customProperties} />
-  ) : (
-    children
-  );
-}
diff --git a/node_modules/react-strict-dom/tests/__snapshots__/html-test.native.js.snap-native b/node_modules/react-strict-dom/tests/__snapshots__/html-test.native.js.snap-native
index 66fc9a9..aa4fae6 100644
--- a/node_modules/react-strict-dom/tests/__snapshots__/html-test.native.js.snap-native
+++ b/node_modules/react-strict-dom/tests/__snapshots__/html-test.native.js.snap-native
@@ -1463,18 +1463,3 @@ exports[`<html.*> style polyfills inherited themes 1`] = `
   </Text>,
 ]
 `;
-
-exports[`<html.*> style polyfills legacy: ThemeProvider 1`] = `
-<Text
-  dir="auto"
-  style={
-    {
-      "color": "red",
-      "position": "static",
-      "userSelect": "auto",
-    }
-  }
->
-  Expect color:red
-</Text>
-`;
diff --git a/node_modules/react-strict-dom/tests/html-test.native.js b/node_modules/react-strict-dom/tests/html-test.native.js
index d5477c3..209140a 100644
--- a/node_modules/react-strict-dom/tests/html-test.native.js
+++ b/node_modules/react-strict-dom/tests/html-test.native.js
@@ -55,25 +55,6 @@ describe('<html.*>', () => {
   });
 
   describe('style polyfills', () => {
-    test('legacy: ThemeProvider', () => {
-      const { ThemeProvider } = contexts;
-      const customProperties = {
-        rootColor: 'red'
-      };
-      const styles = css.create({
-        root: {
-          color: 'var(--rootColor)'
-        }
-      });
-
-      const root = create(
-        <ThemeProvider customProperties={customProperties}>
-          <html.span style={styles.root}>Expect color:red</html.span>
-        </ThemeProvider>
-      );
-      expect(root.toJSON()).toMatchSnapshot();
-    });
-
     test('inherited themes', () => {
       const tokens = css.defineVars({
         rootColor: 'red',
